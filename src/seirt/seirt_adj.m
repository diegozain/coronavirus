function adj = seirt_adj(corona_)
% ------------------------------------------------------------------------------
% diego domenzain
% spring 2020 while at Colorado School of Mines
% ------------------------------------------------------------------------------
% seirt model adj:
% 
% 
% 
% 
% 
% 
% 
% ------------------------------------------------------------------------------
% parameters
p = corona_.p;
% ------------------------------------------------------------------------------
% field
u  = corona_.u;
% ------------------------------------------------------------------------------
% time and Population #
t  = corona_.t;
nP = corona_.nP;
% ------------------------------------------------------------------------------
% source term
f  = corona_.err;
% ------------------------------------------------------------------------------
% measuring matrix
Mu2d = corona_.Mu2d;
% ------------------------------------------------------------------------------
% time reverse!
dt = -corona_.dt;
nt =  numel(t);
% ------------------------------------------------------------------------------
% initial conditions
adj = zeros(nt,7);
% ------------------------------------------------------------------------------
% Runge-Kutta of order 4
% ------------------------------------------------------------------------------
for it=nt:-1:2;
 A   = seirt_A(u,p,-t,nP,it);
 Auu = seirt_Auu(u,p,nP,it);
 Adj = -( Auu + A ).';
 % time reverse index
 it_ = nt-it+1;
 % source term without forcing because that's how the adjoint works
 adj(it_,:) = f(it,:) * Mu2d;
 % -----------------------------------------------------------------------------
 % runge-kutta
 k_1 = Adj*adj(it_,:).';
 k_2 = Adj*( adj(it_,:).' + 0.5*dt*k_1 );
 k_3 = Adj*( adj(it_,:).' + 0.5*dt*k_2 );
 k_4 = Adj*( adj(it_,:).' + dt*k_3 );
 % output
 adj(it_+1,:) = adj(it_,:) + (1/6)*dt*(k_1 + 2*k_2 + 2*k_3 + k_4).';
end
% ------------------------------------------------------------------------------
end